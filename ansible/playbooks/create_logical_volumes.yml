---
- name: Create Logical Volumes
  hosts: all
  become: true
  vars:
      logical_volumes:
          - vg_name: vg1
            lv_name: lv1
            pvs: /dev/sdb1
            mountpoint: /home/bob/Desktop/lvm/vg1/lv1
            file_system_type: ext3
            size: 500M
          - vg_name: vg1
            lv_name: lv2
            pvs: /dev/sdb1
            mountpoint: /home/bob/Desktop/lvm/vg1/lv2
            file_system_type: ext4
            size: 500M
          - vg_name: vg2
            lv_name: lv3
            pvs: /dev/sdb2
            mountpoint: /home/bob/Desktop/lvm/vg2/lv3
            file_system_type: btrfs
            size: 500M
          - vg_name: vg2
            lv_name: lv4
            pvs: /dev/sdb2
            mountpoint: /home/bob/Desktop/lvm/vg2/lv4
            file_system_type: ext3
            size: 500M
          - vg_name: vg2
            lv_name: lv5
            pvs: /dev/sdb2
            mountpoint: /home/bob/Desktop/lvm/vg2/lv5
            file_system_type: ext2
            size: 300M

  tasks:
      - name: Create VG and LVs
        community.general.lvol:
            vg: "{{ item.vg_name }}"
            lv: "{{ item.lv_name }}"
            pvs: "{{ item.pvs }}"
            state: present
            size: "{{ item.size }}"
            resizefs: true
            force: true
        loop: "{{ logical_volumes }}"
        register: vg_result

      - name: Format and mount the LVs
        ansible.builtin.filesystem:
            fstype: "{{ item.file_system_type }}"
            dev: "/dev/mapper/{{ item.vg_name }}-{{ item.lv_name }}"
            state: present
        loop: "{{ logical_volumes }}"
        register: fs_result

      - name: Ensure mountpoints exist
        ansible.builtin.file:
            path: "{{ item.item.mountpoint }}"
            state: directory
        loop: "{{ vg_result.results }}"

      - name: Mount the logical volume "{{ item.item.lv_name }}"
        ansible.posix.mount:
            src: "/dev/mapper/{{ item.item.vg_name }}-{{ item.item.lv_name }}"
            state: mounted
            path: "{{ item.item.mountpoint }}"
            fstype: "{{ item.item.file_system_type }}"
        loop: "{{ vg_result.results }}"
